"use strict";
var Promise = require("bluebird");
var merge = require("json-add");
var timerdaemon = require("timerdaemon");
var child_process = require("child_process");
var execSync = child_process.execSync;
var exec = child_process.exec;
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
            if (err) {
            }
            else if (stdout) {
                if (stdout) {
                    resolve(JSON.parse(stdout));
                }
                else {
                    reject("malformed answer");
                }
            }
            console.log(stdout);
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            merge(configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        if (options) {
        }
        else {
        }
        timerdaemon.pre(5000, function () {
            that.data().then(function (data) {
                cb(data);
            });
        });
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O0FBR0QsaUJBQVMsTUFBTSxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tIFwiYmx1ZWJpcmRcIjtcbmltcG9ydCBtZXJnZSA9IHJlcXVpcmUoXCJqc29uLWFkZFwiKTtcbmltcG9ydCB0aW1lcmRhZW1vbiA9IHJlcXVpcmUoXCJ0aW1lcmRhZW1vblwiKTtcblxuaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiXG5cbmxldCBleGVjU3luYyA9IGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmM7XG5sZXQgZXhlYyA9IGNoaWxkX3Byb2Nlc3MuZXhlYztcblxuaW50ZXJmYWNlIElEb2NrZXJDb25mIHtcblxufVxuXG5pbnRlcmZhY2UgSWRhdGFPcHQge1xuXG59XG5cbmludGVyZmFjZSBJc3RyZWFtT3B0IHtcblxufVxuXG5mdW5jdGlvbiBnZXREYXRhKG9wdCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBleGVjKFwiZG9ja2VyIGluc3BlY3QgJChkb2NrZXIgcHMgfCBhd2sgJ3twcmludCQxfSd8Z3JlcCAtdiBDT05UQUlORVIpXCIsIGZ1bmN0aW9uKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGRvdXQpIHtcblxuICAgICAgICAgICAgICAgIGlmIChzdGRvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHN0ZG91dCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwibWFsZm9ybWVkIGFuc3dlclwiKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coc3Rkb3V0KTtcblxuICAgICAgICB9KVxuXG5cbiAgICB9KVxuXG59XG5cbmNsYXNzIERvY2tlciB7XG5cbiAgICBvcHRpb25zOiBJRG9ja2VyQ29uZlxuICAgIGRvY2tlclZlcnNpb246IHN0cmluZztcbiAgICBjb21wb3NlVmVyc2lvbjogc3RyaW5nO1xuICAgIGFwaVZlcnNpb246IHN0cmluZztcbiAgICBzdGFja3M6IHt9O1xuXG4gICAgY29uc3RydWN0b3IoY29uZj86IElEb2NrZXJDb25mKSB7XG4gICAgICAgIHRoaXMuYXBpVmVyc2lvbiA9IHJlcXVpcmUoXCIuL3BhY2thZ2UuanNvblwiKS52ZXJzaW9uO1xuICAgICAgICB0aGlzLmRvY2tlclZlcnNpb24gPSBleGVjU3luYyhcImRvY2tlciAtdiB8IGdyZXAgdmVyc2lvbiB8IGF3ayAne3ByaW50JDN9JyB8IHNlZCAncy8sLy9nJ1wiKS50b1N0cmluZyhcInV0Zi04XCIpLnJlcGxhY2UoJ1xcbicsICcnKTtcblxuICAgICAgICB0aGlzLmNvbXBvc2VWZXJzaW9uID0gZXhlY1N5bmMoXCJkb2NrZXItY29tcG9zZSAtdiB8IGdyZXAgY29tcG9zZSB8IGF3ayAne3ByaW50JDN9JyB8IHNlZCAncy8sLy9nJ1wiKS50b1N0cmluZyhcInV0Zi04XCIpLnJlcGxhY2UoJ1xcbicsICcnKTtcblxuXG4gICAgICAgIGxldCBjb25maWd1cmF0aW9uOiBJRG9ja2VyQ29uZiA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25mKSB7XG5cbiAgICAgICAgICAgIG1lcmdlKGNvbmZpZ3VyYXRpb24sIGNvbmYpO1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWd1cmF0aW9uO1xuXG4gICAgfVxuXG4gICAgZGF0YShvcHRpb25zPzogSWRhdGFPcHQpIHtcblxuXG4gICAgICAgIGxldCBvcHQ7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcblxuXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICB9XG5cblxuXG4gICAgICAgIHJldHVybiBnZXREYXRhKG9wdCk7XG5cbiAgICB9XG5cbiAgICBzdHJlYW0oY2IsIG9wdGlvbnM/OiBJc3RyZWFtT3B0KSB7XG5cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aW1lcmRhZW1vbi5wcmUoNTAwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGF0LmRhdGEoKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIGNiKGRhdGEpXG5cbiAgICAgICAgICAgIH0pXG5cblxuICAgICAgICB9KVxuXG5cblxuXG4gICAgfVxuXG5cbn1cblxuXG5leHBvcnQgPSBEb2NrZXJcblxuIl19
