"use strict";
var Promise = require("bluebird");
var child_process = require("child_process");
var _ = require("lodash");
var execSync = child_process.execSync;
var exec = child_process.exec;
function checkstack(hostNodes) {
    var stacks = [];
    _.map(hostNodes, function (container) {
        var compose_label = container.Config.Labels["com.docker.compose.project"];
        var exists = false;
        _.map(stacks, function (stack) {
            if (compose_label === stack.label) {
                exists = true;
                stack.containers.push(container);
            }
        });
        if (!exists) {
            stacks.push({ label: compose_label, containers: [container] });
        }
    });
    return stacks;
}
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker ps | grep -c ''", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (stdout && parseInt(stdout) && parseInt(stdout) > 1) {
                console.log(parseInt(stdout));
                exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
                    if (err) {
                        console.log(err);
                    }
                    else if (stdout) {
                        var obj = {
                            containers: JSON.parse(stdout),
                            stacks: checkstack(JSON.parse(stdout))
                        };
                        resolve(obj);
                    }
                    else {
                        reject("malformed json docker logs");
                    }
                });
            }
            else if (stdout && parseInt(stdout) && parseInt(stdout) === 1) {
                resolve([]);
            }
            else {
                reject("malformed answer");
            }
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            Object['assign'](configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        function doit() {
            that.data().then(function (data) {
                cb(data);
            });
        }
        if (options) {
        }
        else {
        }
        setInterval(function () {
            doit();
        }, 5000);
        doit();
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
