"use strict";
var Promise = require("bluebird");
var child_process_1 = require("child_process");
var _ = require("lodash");
function checkstack(hostNodes) {
    var stacks = [];
    _.map(hostNodes, function (container) {
        var compose_label = container.Config.Labels["com.docker.compose.project"];
        var exists = false;
        _.map(stacks, function (stack) {
            if (compose_label === stack.label) {
                exists = true;
                stack.containers.push(container);
            }
        });
        if (!exists) {
            stacks.push({ label: compose_label, containers: [container] });
        }
    });
    return stacks;
}
function getData() {
    return new Promise(function (resolve, reject) {
        child_process_1.exec("docker ps | grep -c ''", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (stdout && parseInt(stdout) && parseInt(stdout) > 1) {
                console.log(parseInt(stdout));
                child_process_1.exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
                    if (err) {
                        console.log(err);
                    }
                    else if (stdout) {
                        var DockerContainers = JSON.parse(stdout);
                        resolve({
                            containers: DockerContainers,
                            stacks: checkstack(DockerContainers)
                        });
                    }
                    else {
                        reject("malformed json docker logs");
                    }
                });
            }
            else if (stdout && parseInt(stdout) && parseInt(stdout) === 1) {
                resolve({
                    containers: [],
                    stacks: []
                });
            }
            else {
                reject("malformed answer");
            }
        });
    });
}
var Dockerlogs = (function () {
    function Dockerlogs(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = child_process_1.execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = child_process_1.execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            Object['assign'](configuration, conf);
        }
        this.options = configuration;
    }
    Dockerlogs.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData();
    };
    Dockerlogs.prototype.stream = function (cb, options) {
        var that = this;
        function doit() {
            that.data().then(function (data) {
                cb(data);
            });
        }
        if (options) {
        }
        else {
        }
        setInterval(function () {
            doit();
        }, 5000);
        doit();
    };
    return Dockerlogs;
}());
exports.Dockerlogs = Dockerlogs;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
