"use strict";
var Promise = require("bluebird");
var merge = require("json-add");
var timerdaemon = require("timerdaemon");
var child_process = require("child_process");
var execSync = child_process.execSync;
var exec = child_process.exec;
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
            if (err) {
            }
            else if (stdout) {
                if (stdout) {
                    resolve(JSON.parse(stdout));
                }
                else {
                    reject("malformed answer");
                }
            }
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            merge(configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        if (options) {
        }
        else {
        }
        timerdaemon.pre(5000, function () {
            that.data().then(function (data) {
                cb(data);
            });
        });
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFByb21pc2UgZnJvbSBcImJsdWViaXJkXCI7XG5pbXBvcnQgbWVyZ2UgPSByZXF1aXJlKFwianNvbi1hZGRcIik7XG5pbXBvcnQgdGltZXJkYWVtb24gPSByZXF1aXJlKFwidGltZXJkYWVtb25cIik7XG5cbmltcG9ydCAqIGFzIGNoaWxkX3Byb2Nlc3MgZnJvbSBcImNoaWxkX3Byb2Nlc3NcIlxuXG5sZXQgZXhlY1N5bmMgPSBjaGlsZF9wcm9jZXNzLmV4ZWNTeW5jO1xubGV0IGV4ZWMgPSBjaGlsZF9wcm9jZXNzLmV4ZWM7XG5cbmludGVyZmFjZSBJRG9ja2VyQ29uZiB7XG5cbn1cblxuaW50ZXJmYWNlIElkYXRhT3B0IHtcblxufVxuXG5pbnRlcmZhY2UgSXN0cmVhbU9wdCB7XG5cbn1cblxuZnVuY3Rpb24gZ2V0RGF0YShvcHQpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZXhlYyhcImRvY2tlciBpbnNwZWN0ICQoZG9ja2VyIHBzIHwgYXdrICd7cHJpbnQkMX0nfGdyZXAgLXYgQ09OVEFJTkVSKVwiLCBmdW5jdGlvbihlcnIsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Rkb3V0KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3Rkb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShzdGRvdXQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIm1hbGZvcm1lZCBhbnN3ZXJcIilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXG5cbiAgICAgICAgfSlcblxuXG4gICAgfSlcblxufVxuXG5jbGFzcyBEb2NrZXIge1xuXG4gICAgb3B0aW9uczogSURvY2tlckNvbmZcbiAgICBkb2NrZXJWZXJzaW9uOiBzdHJpbmc7XG4gICAgY29tcG9zZVZlcnNpb246IHN0cmluZztcbiAgICBhcGlWZXJzaW9uOiBzdHJpbmc7XG4gICAgc3RhY2tzOiB7fTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmY/OiBJRG9ja2VyQ29uZikge1xuICAgICAgICB0aGlzLmFwaVZlcnNpb24gPSByZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbjtcbiAgICAgICAgdGhpcy5kb2NrZXJWZXJzaW9uID0gZXhlY1N5bmMoXCJkb2NrZXIgLXYgfCBncmVwIHZlcnNpb24gfCBhd2sgJ3twcmludCQzfScgfCBzZWQgJ3MvLC8vZydcIikudG9TdHJpbmcoXCJ1dGYtOFwiKS5yZXBsYWNlKCdcXG4nLCAnJyk7XG5cbiAgICAgICAgdGhpcy5jb21wb3NlVmVyc2lvbiA9IGV4ZWNTeW5jKFwiZG9ja2VyLWNvbXBvc2UgLXYgfCBncmVwIGNvbXBvc2UgfCBhd2sgJ3twcmludCQzfScgfCBzZWQgJ3MvLC8vZydcIikudG9TdHJpbmcoXCJ1dGYtOFwiKS5yZXBsYWNlKCdcXG4nLCAnJyk7XG5cblxuICAgICAgICBsZXQgY29uZmlndXJhdGlvbjogSURvY2tlckNvbmYgPSB7XG5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZikge1xuXG4gICAgICAgICAgICBtZXJnZShjb25maWd1cmF0aW9uLCBjb25mKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlndXJhdGlvbjtcblxuICAgIH1cblxuICAgIGRhdGEob3B0aW9ucz86IElkYXRhT3B0KSB7XG5cblxuICAgICAgICBsZXQgb3B0O1xuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG5cblxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgICByZXR1cm4gZ2V0RGF0YShvcHQpO1xuXG4gICAgfVxuXG4gICAgc3RyZWFtKGNiLCBvcHRpb25zPzogSXN0cmVhbU9wdCkge1xuXG5cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGltZXJkYWVtb24ucHJlKDUwMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhhdC5kYXRhKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBjYihkYXRhKVxuXG4gICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgfSlcblxuXG5cblxuICAgIH1cblxuXG59XG5cblxuZXhwb3J0ID0gRG9ja2VyXG5cbiJdfQ==
