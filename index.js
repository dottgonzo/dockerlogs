"use strict";
var Promise = require("bluebird");
var merge = require("json-add");
var timerdaemon = require("timerdaemon");
var child_process = require("child_process");
var _ = require("lodash");
var execSync = child_process.execSync;
var exec = child_process.exec;
function checkstack(hostNodes) {
    var stacks = [];
    _.map(hostNodes, function (container) {
        var compose_label = container.Config.Labels["com.docker.compose.project"];
        var exists = false;
        _.map(stacks, function (stack) {
            if (compose_label === stack.label) {
                exists = true;
                stack.containers.push(container);
            }
        });
        if (!exists) {
            stacks.push({ label: compose_label, containers: [container] });
        }
    });
    return stacks;
}
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
            if (err) {
                console.log(err);
            }
            else if (stdout) {
                if (stdout) {
                    var obj = {
                        containers: JSON.parse(stdout),
                        stacks: checkstack(JSON.parse(stdout))
                    };
                    resolve(obj);
                }
                else {
                    reject("malformed answer");
                }
            }
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            merge(configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        if (options) {
        }
        else {
        }
        timerdaemon.pre(5000, function () {
            that.data().then(function (data) {
                cb(data);
            });
        });
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBR3hJLElBQUksYUFBYSxHQUFnQixFQUVoQyxDQUFDO1FBRUYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUVQLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFL0IsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDO0lBRWpDLENBQUM7SUFFRCxxQkFBSSxHQUFKLFVBQUssT0FBa0I7UUFHbkIsSUFBSSxHQUFHLENBQUM7UUFFUixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBSWQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1FBRVIsQ0FBQztRQUlELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEIsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxFQUFFLEVBQUUsT0FBb0I7UUFHM0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7UUFFUixDQUFDO1FBRUQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUk7Z0JBRTNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUVaLENBQUMsQ0FBQyxDQUFBO1FBR04sQ0FBQyxDQUFDLENBQUE7SUFLTixDQUFDO0lBR0wsYUFBQztBQUFELENBM0VBLEFBMkVDLElBQUE7QUFHRCxpQkFBUyxNQUFNLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0IG1lcmdlID0gcmVxdWlyZShcImpzb24tYWRkXCIpO1xuaW1wb3J0IHRpbWVyZGFlbW9uID0gcmVxdWlyZShcInRpbWVyZGFlbW9uXCIpO1xuXG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiXG5cbmxldCBleGVjU3luYyA9IGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmM7XG5sZXQgZXhlYyA9IGNoaWxkX3Byb2Nlc3MuZXhlYztcblxuaW50ZXJmYWNlIElEb2NrZXJDb25mIHtcblxufVxuXG5pbnRlcmZhY2UgSWRhdGFPcHQge1xuXG59XG5cbmludGVyZmFjZSBJc3RyZWFtT3B0IHtcblxufVxuXG5cblxuZnVuY3Rpb24gY2hlY2tzdGFjayhob3N0Tm9kZXMpIHtcblxuXG4gICAgY29uc3Qgc3RhY2tzID0gW107XG4gICAgXy5tYXAoaG9zdE5vZGVzLCBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG5cblxuICAgICAgICB2YXIgY29tcG9zZV9sYWJlbCA9IGNvbnRhaW5lci5Db25maWcuTGFiZWxzW1wiY29tLmRvY2tlci5jb21wb3NlLnByb2plY3RcIl07XG5cblxuICAgICAgICB2YXIgZXhpc3RzID0gZmFsc2U7XG4gICAgICAgIF8ubWFwKHN0YWNrcywgZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAgICAgICAgICBpZiAoY29tcG9zZV9sYWJlbCA9PT0gc3RhY2subGFiZWwpIHtcbiAgICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0YWNrLmNvbnRhaW5lcnMucHVzaChjb250YWluZXIpXG4gICAgICAgICAgICB9XG5cblxuXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgIHN0YWNrcy5wdXNoKHsgbGFiZWw6IGNvbXBvc2VfbGFiZWwsIGNvbnRhaW5lcnM6IFtjb250YWluZXJdIH0pXG5cblxuICAgICAgICB9XG5cblxuXG5cbiAgICB9KVxuXG5cblxuXG5cblxuXG5cblxuICAgIHJldHVybiBzdGFja3Ncbn1cblxuXG5mdW5jdGlvbiBnZXREYXRhKG9wdCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZXhlYyhcImRvY2tlciBpbnNwZWN0ICQoZG9ja2VyIHBzIHwgYXdrICd7cHJpbnQkMX0nfGdyZXAgLXYgQ09OVEFJTkVSKVwiLCBmdW5jdGlvbiAoZXJyLCBzdGRvdXQsIHN0ZGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Rkb3V0KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3Rkb3V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyczogSlNPTi5wYXJzZShzdGRvdXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tzOiBjaGVja3N0YWNrKEpTT04ucGFyc2Uoc3Rkb3V0KSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIm1hbGZvcm1lZCBhbnN3ZXJcIilcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgfSlcblxuXG4gICAgfSlcblxufVxuXG5jbGFzcyBEb2NrZXIge1xuXG4gICAgb3B0aW9uczogSURvY2tlckNvbmZcbiAgICBkb2NrZXJWZXJzaW9uOiBzdHJpbmc7XG4gICAgY29tcG9zZVZlcnNpb246IHN0cmluZztcbiAgICBhcGlWZXJzaW9uOiBzdHJpbmc7XG4gICAgc3RhY2tzOiB7fTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmY/OiBJRG9ja2VyQ29uZikge1xuICAgICAgICB0aGlzLmFwaVZlcnNpb24gPSByZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbjtcbiAgICAgICAgdGhpcy5kb2NrZXJWZXJzaW9uID0gZXhlY1N5bmMoXCJkb2NrZXIgLXYgfCBncmVwIHZlcnNpb24gfCBhd2sgJ3twcmludCQzfScgfCBzZWQgJ3MvLC8vZydcIikudG9TdHJpbmcoXCJ1dGYtOFwiKS5yZXBsYWNlKCdcXG4nLCAnJyk7XG5cbiAgICAgICAgdGhpcy5jb21wb3NlVmVyc2lvbiA9IGV4ZWNTeW5jKFwiZG9ja2VyLWNvbXBvc2UgLXYgfCBncmVwIGNvbXBvc2UgfCBhd2sgJ3twcmludCQzfScgfCBzZWQgJ3MvLC8vZydcIikudG9TdHJpbmcoXCJ1dGYtOFwiKS5yZXBsYWNlKCdcXG4nLCAnJyk7XG5cblxuICAgICAgICBsZXQgY29uZmlndXJhdGlvbjogSURvY2tlckNvbmYgPSB7XG5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZikge1xuXG4gICAgICAgICAgICBtZXJnZShjb25maWd1cmF0aW9uLCBjb25mKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlndXJhdGlvbjtcblxuICAgIH1cblxuICAgIGRhdGEob3B0aW9ucz86IElkYXRhT3B0KSB7XG5cblxuICAgICAgICBsZXQgb3B0O1xuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG5cblxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgICByZXR1cm4gZ2V0RGF0YShvcHQpO1xuXG4gICAgfVxuXG4gICAgc3RyZWFtKGNiLCBvcHRpb25zPzogSXN0cmVhbU9wdCkge1xuXG5cbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGltZXJkYWVtb24ucHJlKDUwMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuZGF0YSgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIGNiKGRhdGEpXG5cbiAgICAgICAgICAgIH0pXG5cblxuICAgICAgICB9KVxuXG5cblxuXG4gICAgfVxuXG5cbn1cblxuXG5leHBvcnQgPSBEb2NrZXJcblxuIl19
