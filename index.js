"use strict";
var merge = require("json-add");
var timerdaemon = require("timerdaemon");
var child_process = require("child_process");
var execSync = child_process.execSync;
var exec = child_process.exec;
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
            if (err) {
            }
            else if (stdout) {
                if (stdout) {
                    resolve(stdout);
                }
                else {
                    reject("malformed answer");
                }
            }
            console.log(stdout);
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            merge(configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        if (options) {
        }
        else {
        }
        timerdaemon.pre(5000, function () {
            that.data().then(function (data) {
                cb(data);
            });
        });
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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bXBvcnQgKiBhcyBibHVlYmlyZCBmcm9tIFwiYmx1ZWJpcmRcIlxuaW1wb3J0IG1lcmdlID0gcmVxdWlyZShcImpzb24tYWRkXCIpO1xuaW1wb3J0IHRpbWVyZGFlbW9uID0gcmVxdWlyZShcInRpbWVyZGFlbW9uXCIpO1xuXG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcblxubGV0IGV4ZWNTeW5jID0gY2hpbGRfcHJvY2Vzcy5leGVjU3luYztcbmxldCBleGVjID0gY2hpbGRfcHJvY2Vzcy5leGVjO1xuXG5pbnRlcmZhY2UgSURvY2tlckNvbmYge1xuXG59XG5cbmludGVyZmFjZSBJZGF0YU9wdCB7XG5cbn1cblxuaW50ZXJmYWNlIElzdHJlYW1PcHQge1xuXG59XG5cbmZ1bmN0aW9uIGdldERhdGEob3B0KSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGV4ZWMoXCJkb2NrZXIgaW5zcGVjdCAkKGRvY2tlciBwcyB8IGF3ayAne3ByaW50JDF9J3xncmVwIC12IENPTlRBSU5FUilcIiwgZnVuY3Rpb24oZXJyLCBzdGRvdXQsIHN0ZGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZG91dCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0ZG91dCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0ZG91dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJtYWxmb3JtZWQgYW5zd2VyXCIpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzdGRvdXQpO1xuXG4gICAgICAgIH0pXG5cblxuICAgIH0pXG5cbn1cblxuY2xhc3MgRG9ja2VyIHtcblxuICAgIG9wdGlvbnM6IElEb2NrZXJDb25mXG4gICAgZG9ja2VyVmVyc2lvbjogc3RyaW5nO1xuICAgIGNvbXBvc2VWZXJzaW9uOiBzdHJpbmc7XG4gICAgYXBpVmVyc2lvbjogc3RyaW5nO1xuICAgIHN0YWNrczoge307XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mPzogSURvY2tlckNvbmYpIHtcbiAgICAgICAgdGhpcy5hcGlWZXJzaW9uID0gcmVxdWlyZShcIi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247XG4gICAgICAgIHRoaXMuZG9ja2VyVmVyc2lvbiA9IGV4ZWNTeW5jKFwiZG9ja2VyIC12IHwgZ3JlcCB2ZXJzaW9uIHwgYXdrICd7cHJpbnQkM30nIHwgc2VkICdzLywvL2cnXCIpLnRvU3RyaW5nKFwidXRmLThcIikucmVwbGFjZSgnXFxuJywgJycpO1xuXG4gICAgICAgIHRoaXMuY29tcG9zZVZlcnNpb24gPSBleGVjU3luYyhcImRvY2tlci1jb21wb3NlIC12IHwgZ3JlcCBjb21wb3NlIHwgYXdrICd7cHJpbnQkM30nIHwgc2VkICdzLywvL2cnXCIpLnRvU3RyaW5nKFwidXRmLThcIikucmVwbGFjZSgnXFxuJywgJycpO1xuXG5cbiAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb246IElEb2NrZXJDb25mID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbmYpIHtcblxuICAgICAgICAgICAgbWVyZ2UoY29uZmlndXJhdGlvbiwgY29uZik7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICB9XG5cbiAgICBkYXRhKG9wdGlvbnM/OiBJZGF0YU9wdCkge1xuXG5cbiAgICAgICAgbGV0IG9wdDtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuXG5cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgcmV0dXJuIGdldERhdGEob3B0KTtcblxuICAgIH1cblxuICAgIHN0cmVhbShjYixvcHRpb25zPzogSXN0cmVhbU9wdCkge1xuXG5cbiAgICAgICAgbGV0IHRoYXQ9dGhpcztcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgfVxuXG4gdGltZXJkYWVtb24ucHJlKDUwMDAsZnVuY3Rpb24oKXtcbiAgICAgdGhhdC5kYXRhKCkudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgIFxuICAgICAgICAgICAgIGNiKGRhdGEpIFxuICAgICAgICAgXG4gICAgIH0pXG5cbiAgICAgXG4gfSlcbiBcblxuXG5cbiAgICB9XG5cblxufVxuXG5cbmV4cG9ydCA9IERvY2tlclxuXG4iXX0=
