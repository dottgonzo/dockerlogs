"use strict";
var Promise = require("bluebird");
var merge = require("json-add");
var timerdaemon = require("timerdaemon");
var child_process = require("child_process");
var _ = require("lodash");
var execSync = child_process.execSync;
var exec = child_process.exec;
function checkstack(hostNodes) {
    var stacks = [];
    _.map(hostNodes, function (container) {
        var compose_label = container.Config.Labels["com.docker.compose.project"];
        var exists = false;
        _.map(stacks, function (stack) {
            if (compose_label === stack.label) {
                exists = true;
                stack.containers.push(container);
            }
        });
        if (!exists) {
            stacks.push({ label: compose_label, containers: [container] });
        }
    });
    return stacks;
}
function getData(opt) {
    return new Promise(function (resolve, reject) {
        exec("docker inspect $(docker ps | awk '{print$1}'|grep -v CONTAINER)", function (err, stdout, stderr) {
            if (err) {
                console.log(err);
            }
            else if (stdout) {
                if (stdout) {
                    resolve(checkstack(JSON.parse(stdout)));
                }
                else {
                    reject("malformed answer");
                }
            }
        });
    });
}
var Docker = (function () {
    function Docker(conf) {
        this.apiVersion = require("./package.json").version;
        this.dockerVersion = execSync("docker -v | grep version | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        this.composeVersion = execSync("docker-compose -v | grep compose | awk '{print$3}' | sed 's/,//g'").toString("utf-8").replace('\n', '');
        var configuration = {};
        if (conf) {
            merge(configuration, conf);
        }
        this.options = configuration;
    }
    Docker.prototype.data = function (options) {
        var opt;
        if (options) {
        }
        else {
        }
        return getData(opt);
    };
    Docker.prototype.stream = function (cb, options) {
        var that = this;
        if (options) {
        }
        else {
        }
        timerdaemon.pre(5000, function () {
            that.data().then(function (data) {
                cb(data);
            });
        });
    };
    return Docker;
}());
module.exports = Docker;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O1FBRUYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUVQLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFL0IsQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDO0lBRWpDLENBQUM7SUFFRCxxQkFBSSxHQUFKLFVBQUssT0FBa0I7UUFHbkIsSUFBSSxHQUFHLENBQUM7UUFFUixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBSWQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1FBRVIsQ0FBQztRQUlELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEIsQ0FBQztJQUVELHVCQUFNLEdBQU4sVUFBTyxFQUFFLEVBQUUsT0FBb0I7UUFHM0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7UUFFUixDQUFDO1FBRUQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFTLElBQUk7Z0JBRTFCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUVaLENBQUMsQ0FBQyxDQUFBO1FBR04sQ0FBQyxDQUFDLENBQUE7SUFLTixDQUFDO0lBR0wsYUFBQztBQUFELENBM0VBLEFBMkVDLElBQUE7QUFHRCxpQkFBUyxNQUFNLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0IG1lcmdlID0gcmVxdWlyZShcImpzb24tYWRkXCIpO1xuaW1wb3J0IHRpbWVyZGFlbW9uID0gcmVxdWlyZShcInRpbWVyZGFlbW9uXCIpO1xuXG5pbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCJcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiXG5cbmxldCBleGVjU3luYyA9IGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmM7XG5sZXQgZXhlYyA9IGNoaWxkX3Byb2Nlc3MuZXhlYztcblxuaW50ZXJmYWNlIElEb2NrZXJDb25mIHtcblxufVxuXG5pbnRlcmZhY2UgSWRhdGFPcHQge1xuXG59XG5cbmludGVyZmFjZSBJc3RyZWFtT3B0IHtcblxufVxuXG5cblxuZnVuY3Rpb24gY2hlY2tzdGFjayhob3N0Tm9kZXMpIHtcblxuXG4gICAgY29uc3Qgc3RhY2tzPVtdO1xuICAgICAgICBfLm1hcChob3N0Tm9kZXMsIGZ1bmN0aW9uIChjb250YWluZXIpIHtcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29tcG9zZV9sYWJlbCA9IGNvbnRhaW5lci5Db25maWcuTGFiZWxzW1wiY29tLmRvY2tlci5jb21wb3NlLnByb2plY3RcIl07XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5tYXAoc3RhY2tzLCBmdW5jdGlvbiAoc3RhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9zZV9sYWJlbCA9PT0gc3RhY2subGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2suY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcilcbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKHsgbGFiZWw6IGNvbXBvc2VfbGFiZWwsIGNvbnRhaW5lcnM6IFtjb250YWluZXJdIH0pXG5cblxuICAgICAgICAgICAgfVxuXG5cblxuXG4gICAgICAgIH0pXG5cblxuXG5cblxuXG5cbiAgICBcblxuICAgIHJldHVybiBzdGFja3Ncbn1cblxuXG5mdW5jdGlvbiBnZXREYXRhKG9wdCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBleGVjKFwiZG9ja2VyIGluc3BlY3QgJChkb2NrZXIgcHMgfCBhd2sgJ3twcmludCQxfSd8Z3JlcCAtdiBDT05UQUlORVIpXCIsIGZ1bmN0aW9uKGVyciwgc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbmNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3Rkb3V0KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3Rkb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNoZWNrc3RhY2soSlNPTi5wYXJzZShzdGRvdXQpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJtYWxmb3JtZWQgYW5zd2VyXCIpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuXG4gICAgICAgIH0pXG5cblxuICAgIH0pXG5cbn1cblxuY2xhc3MgRG9ja2VyIHtcblxuICAgIG9wdGlvbnM6IElEb2NrZXJDb25mXG4gICAgZG9ja2VyVmVyc2lvbjogc3RyaW5nO1xuICAgIGNvbXBvc2VWZXJzaW9uOiBzdHJpbmc7XG4gICAgYXBpVmVyc2lvbjogc3RyaW5nO1xuICAgIHN0YWNrczoge307XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25mPzogSURvY2tlckNvbmYpIHtcbiAgICAgICAgdGhpcy5hcGlWZXJzaW9uID0gcmVxdWlyZShcIi4vcGFja2FnZS5qc29uXCIpLnZlcnNpb247XG4gICAgICAgIHRoaXMuZG9ja2VyVmVyc2lvbiA9IGV4ZWNTeW5jKFwiZG9ja2VyIC12IHwgZ3JlcCB2ZXJzaW9uIHwgYXdrICd7cHJpbnQkM30nIHwgc2VkICdzLywvL2cnXCIpLnRvU3RyaW5nKFwidXRmLThcIikucmVwbGFjZSgnXFxuJywgJycpO1xuXG4gICAgICAgIHRoaXMuY29tcG9zZVZlcnNpb24gPSBleGVjU3luYyhcImRvY2tlci1jb21wb3NlIC12IHwgZ3JlcCBjb21wb3NlIHwgYXdrICd7cHJpbnQkM30nIHwgc2VkICdzLywvL2cnXCIpLnRvU3RyaW5nKFwidXRmLThcIikucmVwbGFjZSgnXFxuJywgJycpO1xuXG5cbiAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb246IElEb2NrZXJDb25mID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbmYpIHtcblxuICAgICAgICAgICAgbWVyZ2UoY29uZmlndXJhdGlvbiwgY29uZik7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICB9XG5cbiAgICBkYXRhKG9wdGlvbnM/OiBJZGF0YU9wdCkge1xuXG5cbiAgICAgICAgbGV0IG9wdDtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuXG5cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgcmV0dXJuIGdldERhdGEob3B0KTtcblxuICAgIH1cblxuICAgIHN0cmVhbShjYiwgb3B0aW9ucz86IElzdHJlYW1PcHQpIHtcblxuXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVyZGFlbW9uLnByZSg1MDAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoYXQuZGF0YSgpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgY2IoZGF0YSlcblxuICAgICAgICAgICAgfSlcblxuXG4gICAgICAgIH0pXG5cblxuXG5cbiAgICB9XG5cblxufVxuXG5cbmV4cG9ydCA9IERvY2tlclxuXG4iXX0=
